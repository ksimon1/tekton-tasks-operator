---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: windows-efi-installer
spec:
  finally:
    - name: cleanup-vm
      params:
        - name: vmName
          value: $(tasks.create-vm-from-template.results.name)
        - name: delete
          value: "true"
      taskRef:
        kind: ClusterTask
        name: cleanup-vm
      timeout: 10m0s
    - name: delete-template
      params:
        - name: templateName
          value: $(params.installerTemplateName)
        - name: templateNamespace
          value: $(tasks.modify-vm-template.results.namespace)
        - name: deleteTemplate
          value: "true"
      taskRef:
        kind: ClusterTask
        name: modify-vm-template
    - name: delete-imported-iso
      params:
        - name: deleteObject
          value: "true"
        - name: deleteObjectKind
          value: "PersistentVolumeClaim"
        - name: deleteObjectName
          value: "$(tasks.import-win-iso.results.name)"
        - name: namespace
          value: "$(tasks.import-win-iso.results.namespace)"
      taskRef:
        kind: ClusterTask
        name: modify-data-object
  params:
    - description: Download URL to Windows 11 or server 2022 installation ISO (English United States x64 version is needed). You can follow https://www.microsoft.com/en-us/software-download/windows11 or https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2022 to get one.
      name: winImageDownloadURL
      type: string
    - default: windows11-autounattend
      description: Name of the ConfigMap containing the sysprep configuration files (autounattend.xml, etc.). For example windows11-autounattend or windows2022-autounattend. It is possible to provide customize ConfigMaps created by the user too.
      name: autounattendConfigMapName
      type: string
    - default: quay.io/kubevirt/virtio-container-disk:v0.59.0-rc.0
      description: Reference to the containerdisk containing the virtio-win drivers ISO.
      name: virtioContainerDiskName
      type: string
    - default: windows11-desktop-large
      description: Name of the Template which is used to create the installer Template.
      name: sourceTemplateName
      type: string
    - default: openshift
      description: Namespace of the Template which is used to create the installer Template.
      name: sourceTemplateNamespace
      type: string
    - default: windows11-desktop-large-installer
      description: Name of the installer Template which is created. A VM created from this template is used to install Windows 11 or other Windows version.
      name: installerTemplateName
      type: string
    - default: "false"
      description: Allow to replace an already existing installer Template.
      name: allowReplaceInstallerTemplate
      type: string
    - default: win11
      description: Name of the base DataVolume which is created. Pre-installed Windows VMs can be created from this DataVolume.
      name: baseDvName
      type: string
    - default: kubevirt-os-images
      description: Namespace of the base DataVolume which is created.
      name: baseDvNamespace
      type: string
    - default: win11
      description: Name of Windows ISO datavolume
      name: isoDVName
      type: string
  results:
    - description: Name of the created installer Template
      name: installerTemplateName
      value: $(tasks.copy-template.results.name)
    - description: Namespace of the created installer Template
      name: installerTemplateNamespace
      value: $(tasks.copy-template.results.namespace)
    - description: Name of the created base DataVolume
      name: baseDvName
      value: $(tasks.create-base-dv.results.name)
    - description: Namespace of the created base DataVolume
      name: baseDvNamespace
      value: $(tasks.create-base-dv.results.namespace)
  tasks:
    - name: copy-template
      params:
        - name: sourceTemplateName
          value: $(params.sourceTemplateName)
        - name: sourceTemplateNamespace
          value: $(params.sourceTemplateNamespace)
        - name: targetTemplateName
          value: $(params.installerTemplateName)
        - name: allowReplace
          value: $(params.allowReplaceInstallerTemplate)
      taskRef:
        kind: ClusterTask
        name: copy-template
      timeout: 10m0s
    - name: modify-vm-template
      params:
        - name: templateName
          value: $(tasks.copy-template.results.name)
        - name: templateAnnotations
          value:
            - "openshift.io/display-name: Microsoft Windows Installer VM"
            - "description: Template for installing Microsoft Windows."
        - name: deleteDatavolumeTemplate
          value: "true"
        - name: datavolumeTemplates
          value:
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}-installcdrom"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "9Gi"
                      }
                    }
                  },
                  "source": {
                    "pvc": {
                      "name": "$(tasks.import-win-iso.results.name)",
                      "namespace": "$(tasks.import-win-iso.results.namespace)"
                    }
                  }
                }
              }
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}-rootdisk"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "20Gi"
                      }
                    }
                  },
                  "source": {
                    "blank": {}
                  }
                }
              }
        - name: deleteDisks
          value: "true"
        - name: disks
          value:
            - '{"name": "installcdrom", "cdrom": {"bus": "sata"}, "bootOrder": 2}'
            - '{"name": "rootdisk", "disk": {"bus": "virtio"}, "bootOrder": 1}'
            - '{"name": "virtiocontainerdisk", "cdrom": {"bus": "sata"}}'
            - '{"name": "sysprep", "cdrom": {"bus": "sata"}}'
        - name: deleteVolumes
          value: "true"
        - name: volumes
          value:
            - '{"name": "installcdrom", "dataVolume": {"name": "${NAME}-installcdrom"}}'
            - '{"name": "rootdisk", "dataVolume": {"name": "${NAME}-rootdisk"}}'
            - '{"name": "virtiocontainerdisk", "containerDisk": {"image": "$(params.virtioContainerDiskName)"}}'
            - '{"name": "sysprep", "sysprep": {"configMap": {"name": "$(params.autounattendConfigMapName)"}}}'
        - name: deleteTemplateParameters
          value: "true"
        - name: templateParameters
          value:
            - '{"name": "NAME", "description": "VM name", "generate": "expression", "from": "windows-[a-z0-9]{6}"}'
      runAfter:
        - copy-template
        - modify-windows-iso-file
      taskRef:
        kind: ClusterTask
        name: modify-vm-template
      timeout: 10m0s
    - name: create-vm-from-template
      params:
        - name: templateName
          value: $(tasks.modify-vm-template.results.name)
        - name: runStrategy
          value: RerunOnFailure
        - name: startVM
          value: "true"
      runAfter:
        - modify-vm-template
      taskRef:
        kind: ClusterTask
        name: create-vm-from-template
    - name: wait-for-vmi-status
      params:
        - name: vmiName
          value: $(tasks.create-vm-from-template.results.name)
        - name: successCondition
          value: status.phase == Succeeded
        - name: failureCondition
          value: status.phase in (Failed, Unknown)
      runAfter:
        - create-vm-from-template
      taskRef:
        kind: ClusterTask
        name: wait-for-vmi-status
      timeout: 2h0m0s
    - name: create-base-dv
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              name: $(params.baseDvName)
              namespace: $(params.baseDvNamespace)
              annotations:
                cdi.kubevirt.io/storage.bind.immediate.requested: "true"
            spec:
              storage: {}
              source:
                pvc:
                  name: $(tasks.create-vm-from-template.results.name)-rootdisk
                  namespace: $(tasks.create-vm-from-template.results.namespace)
        - name: waitForSuccess
          value: "true"
        - name: allowReplace
          value: "true"
      runAfter:
        - wait-for-vmi-status
      taskRef:
        kind: ClusterTask
        name: modify-data-object
      timeout: 1h0m0s
    - name: import-win-iso
      params:
        - name: manifest
          value: |-
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              annotations:
                cdi.kubevirt.io/storage.bind.immediate.requested: "true"
              generateName: "$(params.isoDVName)-"
            spec:
              source:
                http:
                  url: "$(params.winImageDownloadURL)"
              storage:
                volumeMode: "Filesystem"
                resources:
                  requests:
                    storage: 9Gi
        - name: waitForSuccess
          value: "true"
        - name: deleteObject
          value: "false"
      taskRef:
        kind: ClusterTask
        name: modify-data-object
    - name: modify-windows-iso-file
      params:
        - name: pvcName
          value: $(tasks.import-win-iso.results.name)
      runAfter:
        - import-win-iso
      taskRef:
        kind: ClusterTask
        name: modify-windows-iso-file
